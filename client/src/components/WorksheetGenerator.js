import React, { useState, useRef } from "react";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import DashboardLayout from "../components/DashboardLayout";
import "./WorksheetGenerator.css";
import { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";

export default function WorksheetGenerator() {
  useEffect(() => {
    // Hide scrollbar when this page is active
    document.body.style.overflowY = "hidden";

    // Cleanup when leaving the page
    return () => {
      document.body.style.overflowY = "auto";
    };
  }, []);

  const [title, setTitle] = useState("Math Worksheet");
  const [digits, setDigits] = useState(2);

  const [advancedMode, setAdvancedMode] = useState(false);
  const [upperRange, setUpperRange] = useState({ min: 10, max: 20 });
  const [lowerRange, setLowerRange] = useState({ min: 5, max: 8 });

  const [problemsCount, setProblemsCount] = useState(20);
  // const [regrouping, setRegrouping] = useState("yes");
  const [orientation, setOrientation] = useState("vertical");
  const [operation, setOperation] = useState("addition");
  const [problems, setProblems] = useState([]);
  const [showNumbers, setShowNumbers] = useState(true);
  const [loading, setLoading] = useState(false);

  const worksheetRef = useRef(null);

  // NEW: track active tab to know which hidden clone to export
  const [activeTab, setActiveTab] = useState("worksheet"); // "worksheet" | "answerkey"

  // NEW: hidden fixed-A4 clones refs
  const pdfWorksheetRef = useRef(null);
  const pdfAnswerRef = useRef(null);

  const problemsPerPage = 20;

  const navigate = useNavigate();
  const [user, setUser] = useState(null); // <-- Add user for trial/premium check

  // Fetch user info
  useEffect(() => {
    axios
      .get(`${process.env.REACT_APP_API_URL}/api/auth/me`, {
        withCredentials: true,
      })
      .then((res) => setUser(res.data))
      .catch(() => setUser(null));
  }, []);

  // Protect the page if not premium or trial
  useEffect(() => {
    if (user && !user.isTrial && !user.isPremium) {
      navigate("/dashboard");
    }
  }, [user, navigate]);

  // Helper: split into pages
  const chunkArray = (arr, size) => {
    const chunks = [];
    for (let i = 0; i < arr.length; i += size) {
      chunks.push(arr.slice(i, i + size));
    }
    return chunks;
  };

  // Generate problems
  const generateProblems = () => {
    const generated = [];

    for (let i = 0; i < problemsCount; i++) {
      let num1, num2;

      if (advancedMode) {
        num1 =
          Math.floor(Math.random() * (upperRange.max - upperRange.min + 1)) +
          upperRange.min;

        num2 =
          Math.floor(Math.random() * (lowerRange.max - lowerRange.min + 1)) +
          lowerRange.min;
      } else {
        if (digits === 1) {
          // one-digit numbers (0–9)
          num1 = Math.floor(Math.random() * 10);
          num2 = Math.floor(Math.random() * 10);
        } else {
          const min = Math.pow(10, digits - 1);
          const max = Math.pow(10, digits) - 1;
          num1 = Math.floor(Math.random() * (max - min + 1)) + min;
          num2 = Math.floor(Math.random() * (max - min + 1)) + min;
        }
      }

      let answer;
      switch (operation) {
        case "addition":
          answer = num1 + num2;
          break;
        case "subtraction":
          answer = num1 - num2;
          break;
        case "multiplication":
          answer = num1 * num2;
          break;
        case "division":
          answer = (num1 / num2).toFixed(2);
          break;
        default:
          answer = num1 + num2;
      }

      generated.push({ num1, num2, answer });
    }

    setProblems(generated);
  };

  // Operator symbol
  const getOperator = () => {
    switch (operation) {
      case "addition":
        return "+";
      case "subtraction":
        return "-";
      case "multiplication":
        return "×";
      case "division":
        return "÷";
      default:
        return "+";
    }
  };

  // NEW: re-usable page header (same as visible UI)
  const PageHeader = ({ heading }) => (
    <div className="d-flex align-items-center mb-3 flex-wrap text-break">
      <img
        src="/images/logo.png"
        alt="Logo"
        className="me-3"
        style={{ width: "60px" }}
        crossOrigin="anonymous" // helps html2canvas if served with CORS
      />
      <div>
        <h5 className="mb-1 fw-bold">{heading}</h5>
        <p className="mb-0 small text-muted">
          Custom Math Worksheet generated by TrackMyHomeschool
        </p>
      </div>
    </div>
  );

  // NEW: one function to render a single page (worksheet or answer key)
  const renderPage = (chunk, pageIndex, isAnswerKey = false) => (
    <div
      key={pageIndex}
      className="pdf-page bg-white"
      style={{
        width: "794px", // A4 @ ~96dpi
        minHeight: "1123px",
        padding: "20px",
        boxSizing: "border-box",
        borderBottom: "1px solid #eee",
      }}
    >
      <PageHeader heading={isAnswerKey ? `Answer Key of ${title}` : title} />

      <div
        className={`row g-3 fs-5 ${
          orientation === "horizontal" ? "row-cols-2" : "row-cols-4"
        }`}
      >
        {chunk.map((p, index) =>
          orientation === "vertical" ? (
            <div key={index}>
              {showNumbers && (
                <div className="fw-bold">
                  {pageIndex * problemsPerPage + index + 1})
                </div>
              )}
              <div className="text-end">{p.num1}</div>
              <div className="text-end">
                {getOperator()} {p.num2}
              </div>
              <hr
                className={`border-2 border-dark ${
                  isAnswerKey ? "hr-mar" : ""
                }`}
              />
              {isAnswerKey && (
                <div className="text-end fw-bold text-danger">{p.answer}</div>
              )}
            </div>
          ) : (
            <div className="col-6" key={index}>
              <div className="p-2 text-center">
                {showNumbers && (
                  <span className="fw-bold me-1">
                    {pageIndex * problemsPerPage + index + 1})
                  </span>
                )}
                {p.num1} {getOperator()} {p.num2} ={" "}
                {isAnswerKey ? (
                  <span className="fw-bold text-danger">{p.answer}</span>
                ) : (
                  "_______"
                )}
              </div>
            </div>
          )
        )}
      </div>
    </div>
  );

  // NEW: PDF export — captures the hidden fixed-width clone of the ACTIVE tab
  const downloadPDF = async () => {
    if (!problems.length) return;
    setLoading(true);
    try {
      const pdf = new jsPDF("p", "mm", "a4");
      const container =
        activeTab === "worksheet"
          ? pdfWorksheetRef.current
          : pdfAnswerRef.current;

      const pages = container.querySelectorAll(".pdf-page");
      for (let i = 0; i < pages.length; i++) {
        const canvas = await html2canvas(pages[i], {
          scale: 2, // crisp
          useCORS: true,
          backgroundColor: "#ffffff",
          windowWidth: 794,
          windowHeight: 1123,
          scrollX: 0,
          scrollY: 0,
        });
        const imgData = canvas.toDataURL("image/png");
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
        if (i > 0) pdf.addPage();
        pdf.addImage(imgData, "JPEG", 0, 0, pdfWidth, pdfHeight, "", "FAST");
      }
      pdf.save(
        `${activeTab === "worksheet" ? title : `Answer Key of ${title}`}.pdf`
      );
    } finally {
      setLoading(false);
    }
  };

  const resetWorksheet = () => setProblems([]);

  return (
    <DashboardLayout>
      <div className="container p-0">
        <div className="row">
          {/* === LEFT: Settings (unchanged) === */}
          <div className="col-md-6">
            <div className="p-4 bg-white shadow-lg rounded-2xl border border-gray-200">
              <h3 className="text-xl font-bold text-gray-800 mb-2">
                Worksheet Settings
              </h3>
              <p className="text-gray-500 text-sm mb-4">
                Generate a custom math worksheet with your specified parameters.
                Choose the operation type, number of digits, and more.
              </p>

              <div className="space-y-4">
                {/* Title */}
                <div className="py-1">
                  <label className="form-label fw-semibold text-black text-sm">
                    Title
                  </label>
                  <div className="d-flex align-items-center gap-3">
                    <input
                      type="text"
                      className="w-100 rounded-pill w-full rounded-lg px-3 py-2 text-sm border border-gray-300 shadow-sm focus:ring-2 focus:ring-indigo-400 focus:border-indigo-500 hover:border-indigo-300 transition"
                      value={title}
                      onChange={(e) => setTitle(e.target.value)}
                      placeholder="Enter worksheet title"
                    />
                  </div>
                </div>

                {/* Digits OR Advanced Options */}
                <div className="py-3">
                  <label className="form-label fw-semibold text-black text-sm">
                    Number of Digits
                  </label>

                  {!advancedMode ? (
                    <div className="d-flex align-items-center gap-3 flex-wrap">
                      <input
                        type="number"
                        min="1"
                        className="w-auto rounded-pill w-full rounded-lg px-3 py-2 text-sm border border-gray-300 shadow-sm focus:ring-2 focus:ring-indigo-400 focus:border-indigo-500 hover:border-indigo-300 transition"
                        value={digits}
                        onChange={(e) => setDigits(parseInt(e.target.value))}
                      />
                      <button
                        type="button"
                        className="btn btn-outline-primary btn-sm rounded-pill px-3 py-2 shadow-sm"
                        onClick={() => setAdvancedMode(true)}
                      >
                        Advanced Options
                      </button>
                    </div>
                  ) : (
                    <div className="p-3 rounded-3 bg-light border shadow-sm">
                      <div className="mb-3">
                        <label className="form-label fw-medium text-muted small">
                          Upper Number
                        </label>
                        <div className="d-flex gap-2">
                          <input
                            type="number"
                            className="form-control form-control-sm rounded shadow-sm"
                            value={upperRange.min}
                            onChange={(e) =>
                              setUpperRange({
                                ...upperRange,
                                min: parseInt(e.target.value),
                              })
                            }
                            placeholder="Min"
                          />
                          <input
                            type="number"
                            className="form-control form-control-sm rounded shadow-sm"
                            value={upperRange.max}
                            onChange={(e) =>
                              setUpperRange({
                                ...upperRange,
                                max: parseInt(e.target.value),
                              })
                            }
                            placeholder="Max"
                          />
                        </div>
                      </div>

                      <div className="mb-3">
                        <label className="form-label fw-medium text-muted small">
                          Lower Number
                        </label>
                        <div className="d-flex gap-2">
                          <input
                            type="number"
                            className="form-control form-control-sm rounded shadow-sm"
                            value={lowerRange.min}
                            onChange={(e) =>
                              setLowerRange({
                                ...lowerRange,
                                min: parseInt(e.target.value),
                              })
                            }
                            placeholder="Min"
                          />
                          <input
                            type="number"
                            className="form-control form-control-sm rounded shadow-sm"
                            value={lowerRange.max}
                            onChange={(e) =>
                              setLowerRange({
                                ...lowerRange,
                                max: parseInt(e.target.value),
                              })
                            }
                            placeholder="Max"
                          />
                        </div>
                      </div>

                      <button
                        type="button"
                        className="btn btn-outline-secondary btn-sm rounded-pill px-3 py-2 shadow-sm"
                        onClick={() => setAdvancedMode(false)}
                      >
                        ← Back to Simple
                      </button>
                    </div>
                  )}
                </div>

                {/* Problems Count */}
                <div className="py-1">
                  <label className="form-label fw-semibold text-black text-sm">
                    Number of problems
                  </label>
                  <div className="d-flex align-items-center gap-3">
                    <input
                      type="number"
                      min="1"
                      className="w-100 rounded-pill w-full rounded-lg px-3 py-2 text-sm border border-gray-300 shadow-sm focus:ring-2 focus:ring-indigo-400 focus:border-indigo-500 hover:border-indigo-300 transition"
                      value={problemsCount}
                      onChange={(e) =>
                        setProblemsCount(parseInt(e.target.value))
                      }
                    />
                  </div>
                </div>

                {/* Regrouping */}
                {/* <div className="py-1">
                  <label className="form-label fw-semibold text-black text-sm">
                    Regrouping
                  </label>
                  <div className="d-flex align-items-center gap-3">
                    <select
                      className="w-100 rounded-pill w-full rounded-lg px-3 py-2 text-sm border border-gray-300 shadow-sm focus:ring-2 focus:ring-indigo-400 focus:border-indigo-500 hover:border-indigo-300 transition"
                      value={regrouping}
                      onChange={(e) => setRegrouping(e.target.value)}
                    >
                      <option value="yes">Yes</option>
                      <option value="no">No</option>
                    </select>
                  </div>
                </div> */}

                {/* Operation */}
                <div className="py-1">
                  <label className="form-label fw-semibold text-black text-sm">
                    Operation
                  </label>
                  <div className="d-flex align-items-center gap-3">
                    <select
                      className="w-100 rounded-pill w-full rounded-lg px-3 py-2 text-sm border border-gray-300 shadow-sm focus:ring-2 focus:ring-indigo-400 focus:border-indigo-500 hover:border-indigo-300 transition"
                      value={operation}
                      onChange={(e) => setOperation(e.target.value)}
                    >
                      <option value="addition">Addition</option>
                      <option value="subtraction">Subtraction</option>
                      <option value="multiplication">Multiplication</option>
                      <option value="division">Division</option>
                    </select>
                  </div>
                </div>

                {/* Orientation */}
                <div className="py-1">
                  <label className="form-label fw-semibold text-black text-sm">
                    Orientation
                  </label>
                  <div className="d-flex align-items-center gap-3">
                    <select
                      className="w-100 rounded-pill w-full rounded-lg px-3 py-2 text-sm border border-gray-300 shadow-sm focus:ring-2 focus:ring-indigo-400 focus:border-indigo-500 hover:border-indigo-300 transition"
                      value={orientation}
                      onChange={(e) => setOrientation(e.target.value)}
                    >
                      <option value="vertical">Vertical</option>
                      <option value="horizontal">Horizontal</option>
                    </select>
                  </div>
                </div>

                {/* Show numbers */}
                <div className="form-check d-flex align-items-center gap-2 py-1 mt-2">
                  <input
                    className="form-check-input mt-0"
                    type="checkbox"
                    checked={showNumbers}
                    onChange={() => setShowNumbers(!showNumbers)}
                    id="showNumbersCheck"
                  />
                  <label
                    className="form-check-label text-sm text-gray-700 mb-0"
                    htmlFor="showNumbersCheck"
                  >
                    Display problem numbers
                  </label>
                </div>

                {/* Buttons */}
                <div className="flex gap-3 pt-3">
                  <button
                    onClick={generateProblems}
                    className="btn btn-primary px-4 py-2 bg-indigo-600 rounded-lg hover:bg-indigo-700 shadow-md transition me-3 my-lg-0 my-2"
                  >
                    Create Worksheet
                  </button>
                  <button
                    onClick={downloadPDF}
                    disabled={problems.length === 0 || loading}
                    className={`btn btn-download px-4 py-2 rounded-lg shadow-md transition me-3 my-lg-0 my-2 ${
                      problems.length === 0
                        ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                        : "text-white bg-green-600 hover:bg-green-700"
                    }`}
                  >
                    {loading ? (
                      <span className="d-flex align-items-center gap-2">
                        <span
                          className="spinner-border spinner-border-sm text-light"
                          role="status"
                        ></span>
                        Downloading...
                      </span>
                    ) : (
                      "Download PDF"
                    )}
                  </button>

                  <button
                    onClick={resetWorksheet}
                    disabled={problems.length === 0}
                    className={`btn btn-reset px-4 py-2 rounded-lg shadow-md transition border border-dark ${
                      problems.length === 0
                        ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                        : "text-gray bg-red-600 hover:bg-red-700"
                    }`}
                  >
                    Reset
                  </button>
                </div>

                <div className="alert alert-info mt-3" role="alert">
                  <strong>Note:</strong> The "Download PDF" button will only
                  generate the PDF of the <em>active tab</em> (Worksheet or
                  Answer Key).
                </div>
              </div>
            </div>
          </div>

          {/* === RIGHT: Visible Preview (unchanged, except tab click sets activeTab) === */}
          <div className="col-md-6">
            <div
              className="card shadow-lg rounded-3 border-0"
              ref={worksheetRef}
            >
              {/* Tabs Header */}
              <div className="card-header bg-white border-bottom-0 pb-0 pt-3">
                <ul
                  className="nav nav-tabs custom-tabs card-header-tabs justify-content-center m-0"
                  id="worksheetTabs"
                  role="tablist"
                >
                  <li className="nav-item" role="presentation">
                    <button
                      className={`nav-link ${
                        activeTab === "worksheet" ? "active" : ""
                      }`}
                      id="worksheet-tab"
                      data-bs-toggle="tab"
                      data-bs-target="#worksheet"
                      type="button"
                      role="tab"
                      aria-controls="worksheet"
                      aria-selected={activeTab === "worksheet"}
                      onClick={() => setActiveTab("worksheet")} // NEW
                    >
                      📘 Worksheet
                    </button>
                  </li>
                  <li className="nav-item" role="presentation">
                    <button
                      className={`nav-link ${
                        activeTab === "answerkey" ? "active" : ""
                      }`}
                      id="answerkey-tab"
                      data-bs-toggle="tab"
                      data-bs-target="#answerkey"
                      type="button"
                      role="tab"
                      aria-controls="answerkey"
                      aria-selected={activeTab === "answerkey"}
                      onClick={() => setActiveTab("answerkey")} // NEW
                    >
                      📝 Answer Key
                    </button>
                  </li>
                </ul>
              </div>

              <div
                className="card-body tab-content tab-sm"
                id="worksheetTabsContent"
              >
                {/* Worksheet Tab */}
                <div
                  className={`tab-pane fade ${
                    activeTab === "worksheet" ? "show active" : ""
                  }`}
                  id="worksheet"
                  role="tabpanel"
                  aria-labelledby="worksheet-tab"
                >
                  {problems.length === 0 ? (
                    <div className="p-4 text-center text-muted">
                      <div className="d-flex align-items-center justify-content-center mb-3 flex-wrap text-break">
                        <img
                          src="/images/logo.png"
                          alt="Logo"
                          className="me-3"
                          style={{ width: "60px" }}
                        />
                        <div className="text-start">
                          <h5 className="mb-1 fw-bold">{title}</h5>
                          <p className="mb-0 small text-muted">
                            Custom Math Worksheet generated by TrackMyHomeschool
                          </p>
                        </div>
                      </div>
                      <p>
                        (Worksheet will appear here after you generate problems)
                      </p>
                    </div>
                  ) : (
                    chunkArray(problems, problemsPerPage).map(
                      (chunk, pageIndex) => (
                        <div
                          key={pageIndex}
                          className="mb-4 p-4 bg-white border rounded shadow-sm"
                        >
                          <PageHeader heading={title} />
                          <div
                            className={`row g-3 fs-5 ${
                              orientation === "horizontal"
                                ? "row-cols-2"
                                : "row-cols-4"
                            }`}
                          >
                            {chunk.map((p, index) =>
                              orientation === "vertical" ? (
                                <div key={index}>
                                  {showNumbers && (
                                    <div className="fw-bold">
                                      {pageIndex * problemsPerPage + index + 1})
                                    </div>
                                  )}
                                  <div className="text-end">{p.num1}</div>
                                  <div className="text-end">
                                    {getOperator()} {p.num2}
                                  </div>
                                  <hr className="border-2 border-dark" />
                                </div>
                              ) : (
                                <div className="col-6" key={index}>
                                  <div className="p-2 text-center">
                                    {showNumbers && (
                                      <span className="fw-bold me-1">
                                        {pageIndex * problemsPerPage +
                                          index +
                                          1}
                                        )
                                      </span>
                                    )}
                                    {p.num1} {getOperator()} {p.num2} = _______
                                  </div>
                                </div>
                              )
                            )}
                          </div>
                        </div>
                      )
                    )
                  )}
                </div>

                {/* Answer Key Tab */}
                <div
                  className={`tab-pane fade ${
                    activeTab === "answerkey" ? "show active" : ""
                  }`}
                  id="answerkey"
                  role="tabpanel"
                  aria-labelledby="answerkey-tab"
                >
                  {problems.length === 0 ? (
                    <div className="p-4 text-center text-muted">
                      <div className="d-flex align-items-center justify-content-center mb-3 flex-wrap text-break">
                        <img
                          src="/images/logo.png"
                          alt="Logo"
                          className="me-3"
                          style={{ width: "60px" }}
                        />
                        <div className="text-start">
                          <h5 className="mb-1 fw-bold">{title}</h5>
                          <p className="mb-0 small text-muted">
                            Custom Math Worksheet generated by TrackMyHomeschool
                          </p>
                        </div>
                      </div>
                      <p>
                        (Answer key will appear here after you generate
                        problems)
                      </p>
                    </div>
                  ) : (
                    chunkArray(problems, problemsPerPage).map(
                      (chunk, pageIndex) => (
                        <div
                          key={pageIndex}
                          className="mb-4 p-4 bg-white border rounded shadow-sm"
                        >
                          <PageHeader heading={`Answer Key of ${title}`} />
                          <div
                            className={`row g-3 fs-5 ${
                              orientation === "horizontal"
                                ? "row-cols-2"
                                : "row-cols-4"
                            }`}
                          >
                            {chunk.map((p, index) =>
                              orientation === "vertical" ? (
                                <div key={index}>
                                  {showNumbers && (
                                    <div className="fw-bold">
                                      {pageIndex * problemsPerPage + index + 1})
                                    </div>
                                  )}
                                  <div className="text-end">{p.num1}</div>
                                  <div className="text-end">
                                    {getOperator()} {p.num2}
                                  </div>
                                  <hr className="border-2 border-dark hr-mar" />
                                  <div className="text-end fw-bold text-danger">
                                    {p.answer}
                                  </div>
                                </div>
                              ) : (
                                <div className="col-6" key={index}>
                                  <div className="p-2 text-center">
                                    {showNumbers && (
                                      <span className="fw-bold me-1">
                                        {pageIndex * problemsPerPage +
                                          index +
                                          1}
                                        )
                                      </span>
                                    )}
                                    {p.num1} {getOperator()} {p.num2} ={" "}
                                    <span className="fw-bold text-danger">
                                      {p.answer}
                                    </span>
                                  </div>
                                </div>
                              )
                            )}
                          </div>
                        </div>
                      )
                    )
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* === HIDDEN FIXED-WIDTH A4 CLONES FOR PDF (both tabs) === */}
      <div style={{ position: "absolute", left: "-9999px", top: 0 }}>
        {/* Worksheet Clone */}
        <div
          id="pdf-worksheet"
          ref={pdfWorksheetRef}
          style={{ width: "794px", background: "white" }}
        >
          {problems.length > 0 &&
            chunkArray(problems, problemsPerPage).map((chunk, pageIndex) =>
              renderPage(chunk, pageIndex, false)
            )}
        </div>

        {/* Answer Key Clone */}
        <div
          id="pdf-answerkey"
          ref={pdfAnswerRef}
          style={{ width: "794px", background: "white" }}
        >
          {problems.length > 0 &&
            chunkArray(problems, problemsPerPage).map((chunk, pageIndex) =>
              renderPage(chunk, pageIndex, true)
            )}
        </div>
      </div>
    </DashboardLayout>
  );
}
